name: "CIFAR10_quick"
layer {
  name: "cifar"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    mean_file: "examples/cifar10/mean.binaryproto"
  }
  data_param {
    source: "examples/cifar10/cifar10_train_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "cifar"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    mean_file: "examples/cifar10/mean.binaryproto"
  }
  data_param {
    source: "examples/cifar10/cifar10_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "weights"
  type: "InnerProduct"
  bottom: "data"
  top: "weights"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  inner_product_param {
    num_output: 1
    weight_filler {
      type: "constant"
      value: 0
    }
    bias_filler {
      type: "constant"
      value: 0.5
    }
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 32
    pad: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.0001
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layer {
    bottom: "pool1"
    bottom: "weights"
    name: "bn11"
    top: "bn11"
    type: "MultiModalBatchNorm"
}
layer {
    bottom: "pool1"
    bottom: "weights"
    name: "bn12"
    top: "bn12"
    type: "MultiModalBatchNorm"
}
layer {
  name: "eltwise-sum"
  type: "Eltwise"
  bottom: "bn11"
  bottom: "bn12"
  top: "bn1"
  eltwise_param { operation: SUM }
}
layer {
    bottom: "bn1"
    top: "bn1"
    name: "scale_bn1"
    type: "Scale"
    scale_param {
        bias_term: true
        filler {
          value: 1.0    
        }
        bias_filler {
          value: 0
        }
    }
    param {
          lr_mult: 1
    }
    param {
          lr_mult: 1
    }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "bn1"
  top: "bn1"
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "bn1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 32
    pad: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
    bottom: "conv2"
    bottom: "weights"
    name: "bn21"
    top: "bn21"
    type: "MultiModalBatchNorm"
}
layer {
    bottom: "conv2"
    bottom: "weights"
    name: "bn22"
    top: "bn22"
    type: "MultiModalBatchNorm"
}
layer {
  name: "eltwise-sum"
  type: "Eltwise"
  bottom: "bn21"
  bottom: "bn22"
  top: "bn2"
  eltwise_param { operation: SUM }
}
layer {
    bottom: "bn2"
    top: "bn2"
    name: "scale_bn2"
    type: "Scale"
    scale_param {
        bias_term: true
        filler {
          value: 1.0    
        }
        bias_filler {
          value: 0
        }
    }
    param {
          lr_mult: 1
    }
    param {
          lr_mult: 1
    }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "bn2"
  top: "bn2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "bn2"
  top: "pool2"
  pooling_param {
    pool: AVE
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 64
    pad: 2
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
    bottom: "conv3"
    bottom: "weights"
    name: "bn31"
    top: "bn31"
    type: "MultiModalBatchNorm"
}
layer {
    bottom: "conv3"
    bottom: "weights"
    name: "bn32"
    top: "bn32"
    type: "MultiModalBatchNorm"
}
layer {
  name: "eltwise-sum"
  type: "Eltwise"
  bottom: "bn31"
  bottom: "bn32"
  top: "bn3"
  eltwise_param { operation: SUM }
}
layer {
    bottom: "bn3"
    top: "bn3"
    name: "scale_bn3"
    type: "Scale"
    scale_param {
        bias_term: true
        filler {
          value: 1.0    
        }
        bias_filler {
          value: 0
        }
    }
    param {
          lr_mult: 1
    }
    param {
          lr_mult: 1
    }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "bn3"
  top: "bn3"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "bn3"
  top: "pool3"
  pooling_param {
    pool: AVE
    kernel_size: 3
    stride: 2
  }
}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "pool3"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 64
    weight_filler {
      type: "gaussian"
      std: 0.1
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
    bottom: "ip1"
    bottom: "weights"
    name: "bnip11"
    top: "bnip11"
    type: "MultiModalBatchNorm"
}
layer {
    bottom: "ip1"
    bottom: "weights"
    name: "bnip12"
    top: "bnip12"
    type: "MultiModalBatchNorm"
}
layer {
  name: "eltwise-sum"
  type: "Eltwise"
  bottom: "bnip11"
  bottom: "bnip12"
  top: "bnip1"
  eltwise_param { operation: SUM }
}
layer {
    bottom: "bnip1"
    top: "bnip1"
    name: "scale_bnip1"
    type: "Scale"
    scale_param {
        bias_term: true
        filler {
          value: 1.0    
        }
        bias_filler {
          value: 0
        }
    }
    param {
          lr_mult: 1
    }
    param {
          lr_mult: 1
    }
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "bnip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "gaussian"
      std: 0.1
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip2"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip2"
  bottom: "label"
  top: "loss"
}
