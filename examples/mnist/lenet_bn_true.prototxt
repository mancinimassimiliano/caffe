# LeNetBN
name: "LeNetBN"
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_train_lmdb"
    batch_size: 64
    backend: LMDB
  }
}
layer {
  name: "mnist"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    scale: 0.00390625
  }
  data_param {
    source: "examples/mnist/mnist_test_lmdb"
    batch_size: 100
    backend: LMDB
  }
}
layer {
  name: "weights"
  type: "InnerProduct"
  bottom: "data"
  top: "weights"
  param {
    lr_mult: 0
  }
  param {
    lr_mult: 0
  }
  inner_product_param {
    num_output: 1
    weight_filler {
      type: "constant"
      value: 0
    }
    bias_filler {
      type: "constant"
      value: 0.5
    }
  }
}
layer{
name:"ba"
type:"Silence"
bottom:"weights"

}
layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "data"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
    bottom: "ip1"
    name: "bnip1"
    top: "bnip1"
    type: "BatchNorm"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  batch_norm_param {
    scale_filler {
      type: "constant"
      value: 2
    }
    bias_filler {
      type: "constant"
      value: 0
    }
 engine: CAFFE
  }
}

layer {
  name: "relu1"
  type: "Sigmoid"
  bottom: "bnip1"
  top: "bnip1"
}
layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "bnip1"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
    bottom: "ip2"
    name: "bnip2"
    top: "bnip2"
    type: "BatchNorm"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  batch_norm_param {
    scale_filler {
      type: "constant"
      value: 2
    }
    bias_filler {
      type: "constant"
      value: 0
    }
engine: CAFFE
  }
}

layer {
  name: "relu2"
  type: "Sigmoid"
  bottom: "bnip2"
  top: "bnip2"
}
layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "bnip2"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
    bottom: "ip3"
    name: "bnip3"
    top: "bnip3"
    type: "BatchNorm"
  param {
    lr_mult: 1
    decay_mult: 0
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  batch_norm_param {
    scale_filler {
      type: "constant"
      value: 2
    }
    bias_filler {
      type: "constant"
      value: 0
    }
engine: CAFFE
  }
}

layer {
  name: "relu3"
  type: "Sigmoid"
  bottom: "bnip3"
  top: "bnip3"
}
layer {
  name: "ip4"
  type: "InnerProduct"
  bottom: "bnip3"
  top: "ip4"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    # Since num_output is unset, DIGITS will automatically set it to the
    #   number of classes in your dataset.
    # Uncomment this line to set it explicitly:
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "ip4"
  bottom: "label"
  top: "accuracy"
  include { phase: TEST }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip4"
  bottom: "label"
  top: "loss"
}


